
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.ArrayList;
import java.util.logging.Logger;
import java.util.logging.Level;
import nodes.*;
import parse.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\013\000\002\005\012\000\002\006\007\000" +
    "\002\006\005\000\002\007\010\000\002\007\006\000\002" +
    "\010\010\000\002\010\007\000\002\011\004\000\002\011" +
    "\002\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\005\000" +
    "\002\013\003\000\002\014\005\000\002\014\003\000\002" +
    "\015\003\000\002\015\007\000\002\015\011\000\002\015" +
    "\007\000\002\015\013\000\002\015\006\000\002\015\005" +
    "\000\002\015\006\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\016\005\000\002\016\003\000\002" +
    "\017\005\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\006\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\004\000" +
    "\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\004\ufffe\012\005\001\002\000\004\004" +
    "\102\001\002\000\004\010\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\004\011\013\001" +
    "\002\000\004\007\012\001\002\000\004\004\uffff\001\002" +
    "\000\014\015\021\016\020\017\016\020\017\021\014\001" +
    "\002\000\052\006\uffed\007\uffed\010\uffed\013\uffed\014\uffed" +
    "\015\uffed\022\uffed\023\uffed\024\uffed\026\uffed\031\uffed\032" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\044\uffed\057\uffed\001\002\000\010\007\ufff2\013\ufff2\022" +
    "\023\001\002\000\052\006\uffef\007\uffef\010\uffef\013\uffef" +
    "\014\uffef\015\uffef\022\uffef\023\uffef\024\uffef\026\uffef\031" +
    "\uffef\032\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\044\uffef\057\uffef\001\002\000\052\006\uffee\007" +
    "\uffee\010\uffee\013\uffee\014\uffee\015\uffee\022\uffee\023\uffee" +
    "\024\uffee\026\uffee\031\uffee\032\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\044\uffee\057\uffee\001\002" +
    "\000\052\006\ufff0\007\ufff0\010\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0\031\ufff0\032\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\044" +
    "\ufff0\057\ufff0\001\002\000\052\006\ufff1\007\ufff1\010\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\022\ufff1\023\ufff1\024\ufff1\026" +
    "\ufff1\031\ufff1\032\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\044\ufff1\057\ufff1\001\002\000\006\007" +
    "\ufff6\013\076\001\002\000\024\010\034\015\030\036\031" +
    "\037\033\040\026\041\024\042\032\044\025\057\035\001" +
    "\002\000\052\006\uffd5\007\uffd5\013\uffd5\014\uffd5\025\uffd5" +
    "\027\uffd5\030\uffd5\034\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\001\002\000\024\010\034\015\030\036" +
    "\031\037\033\040\026\041\024\042\032\044\025\057\035" +
    "\001\002\000\052\006\uffd6\007\uffd6\013\uffd6\014\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\034\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\001\002\000\036\007\ufff3\013\ufff3" +
    "\043\043\044\037\045\047\046\045\047\040\050\052\051" +
    "\046\052\041\053\051\054\044\055\042\056\050\001\002" +
    "\000\052\006\uffd9\007\uffd9\013\uffd9\014\uffd9\025\uffd9\027" +
    "\uffd9\030\uffd9\034\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\001\002\000\052\006\uffd8\007\uffd8\013\uffd8" +
    "\014\uffd8\025\uffd8\027\uffd8\030\uffd8\034\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002\000\052\006" +
    "\uffd4\007\uffd4\013\uffd4\014\uffd4\025\uffd4\027\uffd4\030\uffd4" +
    "\034\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\001\002\000\052\006\uffd7\007\uffd7\013\uffd7\014\uffd7\025" +
    "\uffd7\027\uffd7\030\uffd7\034\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\001\002\000\054\005\067\006\uffd3" +
    "\007\uffd3\013\uffd3\014\uffd3\025\uffd3\027\uffd3\030\uffd3\034" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\001" +
    "\002\000\024\010\034\015\030\036\031\037\033\040\026" +
    "\041\024\042\032\044\025\057\035\001\002\000\052\006" +
    "\uffc4\007\uffc4\013\uffc4\014\uffc4\025\uffc4\027\uffc4\030\uffc4" +
    "\034\uffc4\043\043\044\037\045\047\046\045\047\uffc4\050" +
    "\uffc4\051\046\052\041\053\051\054\044\055\042\056\050" +
    "\001\002\000\024\010\034\015\030\036\031\037\033\040" +
    "\026\041\024\042\032\044\025\057\035\001\002\000\024" +
    "\010\034\015\030\036\031\037\033\040\026\041\024\042" +
    "\032\044\025\057\035\001\002\000\024\010\034\015\030" +
    "\036\031\037\033\040\026\041\024\042\032\044\025\057" +
    "\035\001\002\000\024\010\034\015\030\036\031\037\033" +
    "\040\026\041\024\042\032\044\025\057\035\001\002\000" +
    "\024\010\034\015\030\036\031\037\033\040\026\041\024" +
    "\042\032\044\025\057\035\001\002\000\024\010\034\015" +
    "\030\036\031\037\033\040\026\041\024\042\032\044\025" +
    "\057\035\001\002\000\024\010\034\015\030\036\031\037" +
    "\033\040\026\041\024\042\032\044\025\057\035\001\002" +
    "\000\024\010\034\015\030\036\031\037\033\040\026\041" +
    "\024\042\032\044\025\057\035\001\002\000\024\010\034" +
    "\015\030\036\031\037\033\040\026\041\024\042\032\044" +
    "\025\057\035\001\002\000\024\010\034\015\030\036\031" +
    "\037\033\040\026\041\024\042\032\044\025\057\035\001" +
    "\002\000\024\010\034\015\030\036\031\037\033\040\026" +
    "\041\024\042\032\044\025\057\035\001\002\000\024\010" +
    "\034\015\030\036\031\037\033\040\026\041\024\042\032" +
    "\044\025\057\035\001\002\000\052\006\uffcc\007\uffcc\013" +
    "\uffcc\014\uffcc\025\uffcc\027\uffcc\030\uffcc\034\uffcc\043\043" +
    "\044\037\045\047\046\045\047\040\050\uffcc\051\046\052" +
    "\041\053\051\054\044\055\042\056\050\001\002\000\052" +
    "\006\uffc9\007\uffc9\013\uffc9\014\uffc9\025\uffc9\027\uffc9\030" +
    "\uffc9\034\uffc9\043\043\044\037\045\047\046\045\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056" +
    "\uffc9\001\002\000\052\006\uffc6\007\uffc6\013\uffc6\014\uffc6" +
    "\025\uffc6\027\uffc6\030\uffc6\034\uffc6\043\043\044\037\045" +
    "\047\046\045\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\001\002\000\052\006\uffcf\007" +
    "\uffcf\013\uffcf\014\uffcf\025\uffcf\027\uffcf\030\uffcf\034\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002" +
    "\000\052\006\uffcb\007\uffcb\013\uffcb\014\uffcb\025\uffcb\027" +
    "\uffcb\030\uffcb\034\uffcb\043\043\044\037\045\047\046\045" +
    "\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\001\002\000\052\006\uffce\007\uffce\013\uffce" +
    "\014\uffce\025\uffce\027\uffce\030\uffce\034\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\001\002\000\052\006" +
    "\uffc8\007\uffc8\013\uffc8\014\uffc8\025\uffc8\027\uffc8\030\uffc8" +
    "\034\uffc8\043\043\044\037\045\047\046\045\047\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\001\002\000\052\006\uffd1\007\uffd1\013\uffd1\014\uffd1\025" +
    "\uffd1\027\uffd1\030\uffd1\034\uffd1\043\uffd1\044\uffd1\045\047" +
    "\046\045\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\001\002\000\052\006\uffc7\007\uffc7" +
    "\013\uffc7\014\uffc7\025\uffc7\027\uffc7\030\uffc7\034\uffc7\043" +
    "\043\044\037\045\047\046\045\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\001\002\000" +
    "\052\006\uffca\007\uffca\013\uffca\014\uffca\025\uffca\027\uffca" +
    "\030\uffca\034\uffca\043\043\044\037\045\047\046\045\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\056\uffca\001\002\000\052\006\uffcd\007\uffcd\013\uffcd\014" +
    "\uffcd\025\uffcd\027\uffcd\030\uffcd\034\uffcd\043\043\044\037" +
    "\045\047\046\045\047\uffcd\050\uffcd\051\046\052\041\053" +
    "\051\054\044\055\042\056\050\001\002\000\052\006\uffd0" +
    "\007\uffd0\013\uffd0\014\uffd0\025\uffd0\027\uffd0\030\uffd0\034" +
    "\uffd0\043\uffd0\044\uffd0\045\047\046\045\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\001" +
    "\002\000\024\010\034\015\030\036\031\037\033\040\026" +
    "\041\024\042\032\044\025\057\035\001\002\000\040\006" +
    "\uffda\014\073\034\uffda\043\043\044\037\045\047\046\045" +
    "\047\040\050\052\051\046\052\041\053\051\054\044\055" +
    "\042\056\050\001\002\000\004\006\072\001\002\000\052" +
    "\006\uffd2\007\uffd2\013\uffd2\014\uffd2\025\uffd2\027\uffd2\030" +
    "\uffd2\034\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\001\002\000\024\010\034\015\030\036\031\037\033" +
    "\040\026\041\024\042\032\044\025\057\035\001\002\000" +
    "\006\006\uffdb\034\uffdb\001\002\000\052\006\uffc5\007\uffc5" +
    "\013\uffc5\014\uffc5\025\uffc5\027\uffc5\030\uffc5\034\uffc5\043" +
    "\uffc5\044\uffc5\045\047\046\045\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\001\002\000" +
    "\004\010\010\001\002\000\004\007\ufff7\001\002\000\006" +
    "\002\ufffc\004\102\001\002\000\004\002\001\001\002\000" +
    "\004\010\103\001\002\000\004\005\104\001\002\000\006" +
    "\006\107\010\105\001\002\000\004\011\204\001\002\000" +
    "\004\006\177\001\002\000\004\011\110\001\002\000\014" +
    "\015\021\016\020\017\016\020\017\021\014\001\002\000" +
    "\040\010\121\015\030\023\117\024\113\026\120\031\124" +
    "\032\114\035\116\036\031\037\033\040\026\041\024\042" +
    "\032\044\025\057\035\001\002\000\010\007\uffe9\013\175" +
    "\030\uffe9\001\002\000\024\010\034\015\030\036\031\037" +
    "\033\040\026\041\024\042\032\044\025\057\035\001\002" +
    "\000\004\010\160\001\002\000\004\007\157\001\002\000" +
    "\024\010\034\015\030\036\031\037\033\040\026\041\024" +
    "\042\032\044\025\057\035\001\002\000\010\007\uffe8\013" +
    "\uffe8\030\uffe8\001\002\000\024\010\034\015\030\036\031" +
    "\037\033\040\026\041\024\042\032\044\025\057\035\001" +
    "\002\000\044\005\140\014\137\022\141\033\uffdc\034\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002" +
    "\000\004\034\136\001\002\000\004\033\135\001\002\000" +
    "\004\010\125\001\002\000\004\022\126\001\002\000\024" +
    "\010\034\015\030\036\031\037\033\040\026\041\024\042" +
    "\032\044\025\057\035\001\002\000\034\014\130\043\043" +
    "\044\037\045\047\046\045\047\040\050\052\051\046\052" +
    "\041\053\051\054\044\055\042\056\050\001\002\000\024" +
    "\010\034\015\030\036\031\037\033\040\026\041\024\042" +
    "\032\044\025\057\035\001\002\000\034\025\132\043\043" +
    "\044\037\045\047\046\045\047\040\050\052\051\046\052" +
    "\041\053\051\054\044\055\042\056\050\001\002\000\040" +
    "\010\121\015\030\023\117\024\113\026\120\031\124\032" +
    "\114\035\116\036\031\037\033\040\026\041\024\042\032" +
    "\044\025\057\035\001\002\000\004\007\134\001\002\000" +
    "\010\007\uffe4\013\uffe4\030\uffe4\001\002\000\010\007\uffe0" +
    "\013\uffe0\030\uffe0\001\002\000\010\007\uffdf\013\uffdf\030" +
    "\uffdf\001\002\000\004\010\145\001\002\000\024\010\034" +
    "\015\030\036\031\037\033\040\026\041\024\042\032\044" +
    "\025\057\035\001\002\000\024\010\034\015\030\036\031" +
    "\037\033\040\026\041\024\042\032\044\025\057\035\001" +
    "\002\000\040\007\uffe2\013\uffe2\030\uffe2\043\043\044\037" +
    "\045\047\046\045\047\040\050\052\051\046\052\041\053" +
    "\051\054\044\055\042\056\050\001\002\000\004\006\144" +
    "\001\002\000\044\007\uffe1\013\uffe1\014\uffd2\030\uffe1\034" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\001" +
    "\002\000\006\014\137\033\uffdc\001\002\000\004\033\uffdd" +
    "\001\002\000\034\027\150\043\043\044\037\045\047\046" +
    "\045\047\040\050\052\051\046\052\041\053\051\054\044" +
    "\055\042\056\050\001\002\000\040\010\121\015\030\023" +
    "\117\024\113\026\120\031\124\032\114\035\116\036\031" +
    "\037\033\040\026\041\024\042\032\044\025\057\035\001" +
    "\002\000\006\007\153\030\152\001\002\000\040\010\121" +
    "\015\030\023\117\024\113\026\120\031\124\032\114\035" +
    "\116\036\031\037\033\040\026\041\024\042\032\044\025" +
    "\057\035\001\002\000\010\007\uffe5\013\uffe5\030\uffe5\001" +
    "\002\000\004\007\155\001\002\000\010\007\uffe6\013\uffe6" +
    "\030\uffe6\001\002\000\040\007\uffde\013\uffde\030\uffde\043" +
    "\043\044\037\045\047\046\045\047\040\050\052\051\046" +
    "\052\041\053\051\054\044\055\042\056\050\001\002\000" +
    "\006\002\ufffa\004\ufffa\001\002\000\004\011\164\001\002" +
    "\000\040\010\121\015\030\023\117\024\113\026\120\031" +
    "\124\032\114\035\116\036\031\037\033\040\026\041\024" +
    "\042\032\044\025\057\035\001\002\000\004\007\163\001" +
    "\002\000\010\007\uffe3\013\uffe3\030\uffe3\001\002\000\014" +
    "\015\021\016\020\017\016\020\017\021\014\001\002\000" +
    "\006\013\ufff2\022\023\001\002\000\004\013\167\001\002" +
    "\000\040\010\160\015\ufff4\023\ufff4\024\ufff4\026\ufff4\031" +
    "\ufff4\032\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\044\ufff4\057\ufff4\001\002\000\040\010\ufff5\015" +
    "\ufff5\023\ufff5\024\ufff5\026\ufff5\031\ufff5\032\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\044\ufff5\057" +
    "\ufff5\001\002\000\034\025\172\043\043\044\037\045\047" +
    "\046\045\047\040\050\052\051\046\052\041\053\051\054" +
    "\044\055\042\056\050\001\002\000\040\010\121\015\030" +
    "\023\117\024\113\026\120\031\124\032\114\035\116\036" +
    "\031\037\033\040\026\041\024\042\032\044\025\057\035" +
    "\001\002\000\004\007\174\001\002\000\010\007\uffe7\013" +
    "\uffe7\030\uffe7\001\002\000\040\010\121\015\030\023\117" +
    "\024\113\026\120\031\124\032\114\035\116\036\031\037" +
    "\033\040\026\041\024\042\032\044\025\057\035\001\002" +
    "\000\006\007\uffea\030\uffea\001\002\000\004\011\200\001" +
    "\002\000\014\015\021\016\020\017\016\020\017\021\014" +
    "\001\002\000\040\010\121\015\030\023\117\024\113\026" +
    "\120\031\124\032\114\035\116\036\031\037\033\040\026" +
    "\041\024\042\032\044\025\057\035\001\002\000\004\007" +
    "\203\001\002\000\006\002\ufffb\004\ufffb\001\002\000\014" +
    "\015\021\016\020\017\016\020\017\021\014\001\002\000" +
    "\006\006\ufff8\014\206\001\002\000\004\010\105\001\002" +
    "\000\004\006\ufff9\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\002\005\003\003\001\001\000\006\004" +
    "\100\005\077\001\001\000\004\007\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\014\001\001\000\002" +
    "\001\001\000\004\011\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\026\001\001\000\002\001\001\000" +
    "\004\020\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\035\001\001" +
    "\000\002\001\001\000\004\020\065\001\001\000\004\020" +
    "\064\001\001\000\004\020\063\001\001\000\004\020\062" +
    "\001\001\000\004\020\061\001\001\000\004\020\060\001" +
    "\001\000\004\020\057\001\001\000\004\020\056\001\001" +
    "\000\004\020\055\001\001\000\004\020\054\001\001\000" +
    "\004\020\053\001\001\000\004\020\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\070\020\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\073\020\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\076\001\001\000\002\001" +
    "\001\000\006\004\207\005\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\110\001\001\000\014\014\114\015\111\016" +
    "\122\017\121\020\067\001\001\000\002\001\001\000\004" +
    "\020\170\001\001\000\004\010\160\001\001\000\002\001" +
    "\001\000\004\020\155\001\001\000\002\001\001\000\004" +
    "\020\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\126\001\001\000\002\001\001\000\004\020\130\001" +
    "\001\000\002\001\001\000\014\014\132\015\111\016\122" +
    "\017\121\020\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\145" +
    "\001\001\000\006\017\142\020\067\001\001\000\004\020" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\150\015\111\016\122\017\121\020\067" +
    "\001\001\000\002\001\001\000\014\014\153\015\111\016" +
    "\122\017\121\020\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\161\015\111\016\122" +
    "\017\121\020\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\164\001\001\000\004\011\165\001\001" +
    "\000\002\001\001\000\004\010\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\172\015\111\016\122" +
    "\017\121\020\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\175\015\111\016\122\017\121\020\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\200\001\001\000\014\014\201\015\111\016\122\017\121" +
    "\020\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\204\001\001\000\002\001\001\000\004\006\206" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Logger log = Logger.getLogger("Circuit.cup");


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= Global Functions 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramOP((ArrayList<FunDefinOP>)funs,(ArrayList<VarDeclOP>)vars); log.info("---------------------ProgramOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Global ::= GLOBAL Var_decls END 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = vars;   log.info("---------------------vars\n"+ RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Global",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Global ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Global",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Functions ::= Def_fun Functions 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList) funs).add(0,fun); RESULT = funs;   log.info("---------------------fun\n" + fun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Functions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Functions ::= Def_fun 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<FunDefinOP>() {{ add((FunDefinOP)fun);}};  log.info("---------------------last fun\n" + fun); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Functions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Def_fun ::= FUNCTION ID LPAR Par_decls RPAR COLON Type Statements END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunDefinOP(new Identifier(id+"", (String) ty, TypeChecker.FUNCTION, (ArrayList<ParDeclOP>)pd),(ArrayList<ParDeclOP>)pd,new BodyOP((ArrayList<Stat>)body)); log.info("---------------------FunDefinOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_fun",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Def_fun ::= FUNCTION ID LPAR RPAR COLON Type Statements END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunDefinOP(new Identifier(id+"", (String) ty, TypeChecker.FUNCTION),new ArrayList<ParDeclOP>(),new BodyOP((ArrayList<Stat>)body)); log.info("---------------------FunDefinOP no arg\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Def_fun",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Par_decls ::= ID COLON Type COMMA Par_decls 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList) params).add(0,new ParDeclOP(new Identifier(id+"", (String) ty, TypeChecker.VARIABLE))); RESULT = params;   log.info("---------------------ParDeclOP\n" + ((ArrayList) params).get(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Par_decls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Par_decls ::= ID COLON Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ParDeclOP> params = new ArrayList<ParDeclOP>() {{ add(new ParDeclOP(new Identifier(id+"", (String) ty, TypeChecker.VARIABLE)));}}; RESULT = params; log.info("---------------------last ParDeclOP\n" + ((ArrayList) params).get(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Par_decls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Var_decls ::= ID COLON Type Var_init_value SEMI Var_decls 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList) vars).add(0,new VarDeclOP(new Identifier(id+"", (String) ty, TypeChecker.VARIABLE),(Expr)e)); RESULT = vars;   log.info("---------------------VarDeclOP\n" + ((ArrayList) vars).get(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_decls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Var_decls ::= ID COLON Type Var_init_value 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<VarDeclOP> vars = new ArrayList<VarDeclOP>() {{ add(new VarDeclOP(new Identifier(id+"", (String) ty, TypeChecker.VARIABLE),(Expr)e));}};  RESULT=vars; log.info("---------------------last VarDeclOP\n" + ((ArrayList) vars).get(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_decls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Var_decls_local ::= ID COLON Type Var_init_value SEMI Var_decls_local 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList) vars).add(0,new VarDeclOP(new Identifier(id+"", (String) ty, TypeChecker.VARIABLE),(Expr)e)); RESULT = vars;   log.info("---------------------VarDeclOPLocal\n" + ((ArrayList) vars).get(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_decls_local",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var_decls_local ::= ID COLON Type Var_init_value SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  ArrayList<VarDeclOP> vars = new ArrayList<VarDeclOP>() {{ add(new VarDeclOP(new Identifier(id+"", (String) ty, TypeChecker.VARIABLE),(Expr)e));}}; RESULT=vars; log.info("---------------------last VarDeclOPLocal\n" + ((ArrayList) vars).get(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_decls_local",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Var_init_value ::= ASSIGN Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;   log.info("---------------------expr\n"+ RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Var_init_value ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var_init_value",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= NIL 
            {
              Object RESULT =null;
		 RESULT = TypeChecker.Nil; log.info("---------------------" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = TypeChecker.INT; log.info("---------------------" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = TypeChecker.BOOL; log.info("---------------------" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = TypeChecker.FLOAT; log.info("---------------------" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = TypeChecker.STRING; log.info("---------------------" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Types ::= Type COMMA Types 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tysleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tysright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tys = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList) tys).add(0,ty); RESULT = tys;   log.info("---------------------" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Types ::= Type 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>() {{ add((String)ty);}}; log.info("---------------------" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Types",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statements ::= Stat SEMI Statements 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stats = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList) stats).add(0,stat); RESULT = stats;   log.info("---------------------stat\n" + stat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statements ::= Stat 
            {
              Object RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Stat>() {{ add((Stat)stat);}};  log.info("---------------------last stat\n" + stat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stat ::= NOP 
            {
              Object RESULT =null;
		 RESULT = new Nop(); log.info("---------------------NopOP\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stat ::= WHILE Expr DO Statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileOP((Expr)e,new BodyOP((ArrayList<Stat>)body1)); log.info("---------------------WhileOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stat ::= IF Expr THEN Statements ELSE Statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object body1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfThenElseOP((Expr)e,new BodyOP((ArrayList<Stat>)body1),new BodyOP((ArrayList<Stat>)body2)); log.info("---------------------IfThenElseOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stat ::= IF Expr THEN Statements END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfThenOP((Expr)e,new BodyOP((ArrayList<Stat>)body)); log.info("---------------------IfThenOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stat ::= FOR ID ASSIGN Expr COMMA Expr DO Statements END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForOP(new Identifier(id+""),(Expr)e1,(Expr)e2,new BodyOP((ArrayList<Stat>)body)); log.info("---------------------ForOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= LOCAL Var_decls_local Statements END 
            {
              Object RESULT =null;
		int vardeclopsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vardeclopsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vardeclops = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LocalBlock((ArrayList<VarDeclOP>)vardeclops,new BodyOP((ArrayList<Stat>)body)); log.info("---------------------LocalBlock\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignOP(new Identifier(id+""),(Expr)e); log.info("---------------------AssignOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunCallOP(new Identifier(id+""),(ArrayList<Expr>) exprs); log.info("---------------------FunCallOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= Vars READ 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadOP((ArrayList<Identifier>)vars); log.info("---------------------ReadOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= Exprs WRITE 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOP((ArrayList<Expr>) exprs); log.info("---------------------WriteOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= RETURN Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnOP((Expr)e1); log.info("---------------------ReturnOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Vars ::= ID COMMA Vars 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList) vars).add(0,new Identifier((String)id)); RESULT = vars;   log.info("---------------------var\n" + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Vars ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Identifier>() {{ add(new Identifier((String)id));}};  log.info("---------------------last var\n" + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((ArrayList) exprs).add(0,e1); RESULT = exprs;   log.info("---------------------expr\n" + e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exprs ::= Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<Expr>() {{ add((Expr)e1);}};  log.info("---------------------last expr\n" + e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= NIL 
            {
              Object RESULT =null;
		 RESULT =new NilOP(); log.info("---------------------NilOP\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= TRUE 
            {
              Object RESULT =null;
		 RESULT =new BooleanConst(true);  log.info("---------------------BoolConst\n" + true);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= FALSE 
            {
              Object RESULT =null;
		 RESULT =new BooleanConst(false);  log.info("---------------------BoolConst\n" + false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= INT_CONST 
            {
              Object RESULT =null;
		int intConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object intConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new IntConstOP(Integer.parseInt(intConst+"")); log.info("---------------------IntConstOP\n" + intConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= FLOAT_CONST 
            {
              Object RESULT =null;
		int floatConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int floatConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object floatConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new FloatConstOP(Float.parseFloat(floatConst+"")); log.info("---------------------FloatConstOP\n" + floatConst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stringConst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new StringConstOP(stringConst+"");  log.info("---------------------StringConst\n" + stringConst);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new Identifier(id+""); log.info("---------------------Identifier\n" + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunCallOP(new Identifier(id+""),(ArrayList<Expr>) exprs); log.info("---------------------FunCallOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddOP((Expr)e1,(Expr)e2); log.info("---------------------AddOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DiffOP((Expr)e1,(Expr)e2); log.info("---------------------DiffOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MulOP((Expr)e1,(Expr)e2); log.info("---------------------MulOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivOP((Expr)e1,(Expr)e2); log.info("---------------------DivOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndOP((Expr)e1,(Expr)e2); log.info("---------------------AndOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrOP((Expr)e1,(Expr)e2); log.info("---------------------OrOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GtOP((Expr)e1,(Expr)e2); log.info("---------------------GtOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GeOP((Expr)e1,(Expr)e2); log.info("---------------------GeOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LtOP((Expr)e1,(Expr)e2); log.info("---------------------LtOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LeOP((Expr)e1,(Expr)e2); log.info("---------------------LeOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqOP((Expr)e1,(Expr)e2); log.info("---------------------EqOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NeOP((Expr)e1,(Expr)e2); log.info("---------------------NeOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UminusOP((Expr)e1); log.info("---------------------UminusOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotOP((Expr)e1); log.info("---------------------NotOP\n" + RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
